TITLE:: NrpnTable
summary:: lookup table for NRPN numbers
categories:: Utilities
related:: Classes/ScProphetRev2

DESCRIPTION::
lookup table for NRPN numbers. Supported are

oscillators:
'OSC1_FREQ', 'OSC1_FINE', 'OSC1_SHAPE', 'OSC1_GLIDE', 'OSC1_KBD', 'OSC2_FREQ', 'OSC2_FINE', 'OSC2_SHAPE', 'OSC2_GLIDE', 'OSC2_KBD', 'SYNC', 'GLIDE', 'SLOP', 'OSC_MIX', 'OSC1_NOISE', 'OSC1_SUBOSC', 'OSC1_NOTERESET', 'OSC1_SHAPEMOD', 'OSC2_SHAPEMOD', 'OSC2_NOTERESET',

filter:
'LPF_CUTOFF', 'LPF_RESONANCE', 'LPF_KBD_TRACKING', 'LPF_AUDIO_MOD', 'LPF_POLES', 'LPF_ENV_AMT', 'LPF_ENV_VEL', 'LPF_ENV_DLY', 'LPF_ENV_ATT', 'LPF_ENV_DEC', 'LPF_ENV_SUS', 'LPF_ENV_REL',

amplitude:
'AMP_ENVAMT', 'AMP_VELOCITY', 'AMP_DLY', 'AMP_ATT', 'AMP_DEC', 'AMP_SUS', 'AMP_REL', 'PAN_SPREAD', 'PRG_VOLUME',

lfos:
'LFO1_FREQ', 'LFO1_SHAPE', 'LFO1_AMT', 'LFO1_DEST', 'LFO1_CLKSYNC',..., 'LFO4_FREQ', 'LFO4_SHAPE', 'LFO4_AMT', 'LFO4_DEST', 'LFO4_CLKSYNC', 'LFO1_KEYSYNC', 'LFO2_KEYSYNC', 'LFO3_KEYSYNC', 'LFO4_KEYSYNC',

auxiliary env:
'ENV3_DST', 'ENV3_AMT', 'ENV3_VEL', 'ENV3_DEL', 'ENV3_ATT', 'ENV3_DEC', 'ENV3_SUS', 'ENV3_REL', 'ENV3_RPT',

modulation matrix:
'MOD1_SRC', 'MOD1_AMT', 'MOD1_DST', ..., 'MOD8_SRC', 'MOD8_AMT', 'MOD8_DST', 'MODWHEEL_AMT', 'MODWHEEL_DST', 'PRESSURE_AMT', 'PRESSURE_DST', 'BREATH_AMT', 'BREATH_DST', 'VELOCITY_AMT', 'VELOCITY_DST', 'FOOTCTRL_AMT', 'FOOTCTRL_DST',

effects:
'FX_ONOFF', 'FX_SELECT', 'FX_MIX', 'FX_PARAM1', 'FX_PARAM2', 'FX_CLKSYNC',

arpeggiator:
'ARP_OFFON', 'ARP_MODE', 'ARP_RANGE', 'ARP_CLK_DIV', 'ARP_RPTS', 'ARP_RELATCH', 'BPM_TEMPO',

other:
'VCA_LEVEL', 'GLIDE', 'PITCHBENDRANGE', 'PANMODE', 'ABMODE', 'UNISON_DETUNE', 'UNISON_MODE', 'KEYMODE', 'SPLITPOINT',

sequencers:
'GATED_SEQMODE', 'GATED_SEQPOLY', 'SEQ_PLAY_STOP'

gated sequencer:
'SEQ1_DST', 'SEQ2_DST','SEQ3_DST','SEQ4_DST','SEQ1_GATED_STEP1_TRACK1', ..., 'SEQ1_GATED_STEP16_TRACK4',

poly sequencer:
'SEQ1_POLY_NOTE1_STEP1',  'SEQ1_POLY_NOTE1_STEP1', ..., 'SEQ1_POLY_NOTE6_STEP63', 'SEQ1_POLY_NOTE6_VEL64'

global properties:

'MASTERTUNE_COARSE', 'MASTERTUNE_FINE', 'MIDI_CHANNEL', 'MIDI_CLOCK_MODE', 'MIDI_CLOCK_CABLE', 'MIDI_PARAM_SEND', 'MIDI_PARAM_RECV', 'MIDI_CONTROL_ENABLE', 'MIDI_SYSEX_CABLE', 'MIDI_OUT_SELECT', 'LOCAL_CONTROL', 'POT_MODE', 'SEQ_PEDAL_MODE', 'SUS_POLARITY', 'VELOCITY_CURVE', 'PRESSURE_CURVE', 'MONO_STEREO', 'ALT_TUNING', 'MIDI_PROG_ENABLE', 'MULTI_MODE', 'SCREENSAVER', 'SUSTAIN_ARP', 'LAYER A/B SWITCH', 'SEQ_REC_ONOFF',

fake properties:

'cLAYERA_CHAR1'


CLASSMETHODS::

METHOD:: new

returns:: new NrpnTable


INSTANCEMETHODS::

METHOD:: str2num
converts textual description back to NRPN number

ARGUMENT:: name
textual description, e.g. 'LFO_CUTOFF'

ARGUMENT:: layer
one of "A" or "B"

returns:: layer on which to set the NRPN

METHOD:: num2str
converts NRPN number to textual description

ARGUMENT:: num
NRPN number

returns:: string indicating which NRPN is being addressed

EXAMPLES::

code::
(
~synth = ScProphetRev2.new;
~synth.connect;
~synth.select_patch_by_id("F2", "P2");
)

(
s.waitForBoot({
	var chords, melody, combined, cutoff_a, cutoff_b, slop_a, slop_b;
	var parser = TheoryNoteParser.new;
	var killnotes = { ~synth.all_notes_off; CmdPeriod.remove(killnotes); };
	var table = NrpnTable.new;

	CmdPeriod.add(killnotes);

	chords = Pbind(
		\type, \midi,
		\midicmd, \noteOn,
		\midiout, ~synth.midi_out,
		\chan, 0,
		\midinote, Pseq([
				Pseq(["d2 d4",
					"d2 d4 f4",
					"d2 d4 e4",
					"d2 d4 e4 g4",
					"d2 d4 f4",
					"d2 d4 f4 a4",
					"d2 d4 e4 g4",
					"d2 d4 f4 a4",
					"d2 d4 f4 a4 c5",
					"d2 e4 g4 a4 c5",
					"d2 e4 f4 bb4 d5",
					"d2 eb4 f4 bb4 c5",
				].collect({|el|parser.asMidi(el);}), 4),
			], inf),
		\dur, Pseq([4],inf),
		\legato, 1,
		\amp, Pbrown(0.3, 0.6, 0.05, inf),
	);

	melody = Pbind(
		\type, \midi,
		\midicmd, \noteOn,
		\midiout, ~synth.midi_out,
		\chan, 0,
		\midinote, Pseq(["a6", "b6", "c7", "e6", "f6", "g#6", "a6", "g6", "a6", "c7", "bb6", "ab6"].collect({|el|parser.asMidi(el);})),
		\dur, Pwrand([4/12, 4/6, 1], [9, 3, 1].normalizeSum, inf),
		\legato, 0.9,
		\amp, Pbrown(0.3, 0.5, 0.05, inf)
	);

	cutoff_a = Pbind(
		    \instrument, \default,
		    \amp, 0,
		    \number, table.str2num('LPF_CUTOFF', "A"),
		    \value, Pbrown(20, 127, 1),
		    \dur, 0.05,
		    \channel, 1,
		    \receiver, Pfunc({ | event | ~synth.sendNRPN(event[\number], event[\value], event[\channel])}),
	);

	cutoff_b = Pbind(
		\instrument, \default,
		\amp, 0,
		\number, table.str2num('LPF_CUTOFF', "B"),
		\value, Pbrown(20, 127, 1),
		\dur, 0.045,
		\channel, 1,
		\receiver, Pfunc({ | event | ~synth.sendNRPN(event[\number], event[\value], event[\channel])}),
	);

	slop_a = Pbind(
		\instrument, \default,
		\amp, 0,
		\number, table.str2num('SLOP', "A"),
		\value, Pbrown(0, 50, 1).trace,
		\dur, Pfunc({0.5.rrand(0.1);}),
		\channel, 1,
		\receiver, Pfunc({ | event | ~synth.sendNRPN(event[\number], event[\value], event[\channel])}),
	);

	slop_b = Pbind(
		\instrument, \default,
		\amp, 0,
		\number, table.str2num('SLOP', "B"),
		\value, Pbrown(0, 50, 1).trace,
		\dur, Pfunc({0.5.rrand(0.1);}),
		\channel, 1,
		\receiver, Pfunc({ | event | ~synth.sendNRPN(event[\number], event[\value], event[\channel])}),
	);

	combined = Ppar([chords, melody, cutoff_a, cutoff_b, slop_a, slop_b], 1);
	~player = combined.play(quant: TempoClock.default.beats + 1.0);
});

)

(
~synth.all_notes_off;
~player.stop;
)
::