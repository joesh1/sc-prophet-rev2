// first run this and wait until connected
(
~synth = ScProphetRev2.new;
~synth.connect;
)

// then run this
(
~banks = ["U1", "U2", "U3", "U4", "F1", "F2", "F3", "F4"];
~collectedpatches = [];
~filecontents = [];
fork {
	var prepath = PathName(TemplateFiller.class.filenameSymbol.asString).parentPath +/+ "template" +/+ "template-preamble.tex";
	var postpath = PathName(TemplateFiller.class.filenameSymbol.asString).parentPath +/+ "template" +/+ "template-postamble.tex";
	var pngpath = PathName(TemplateFiller.class.filenameSymbol.asString).parentPath +/+ "template" +/+ "rev2.png";
	var outputpath = PathName("/home/shimpe/documents/music/rev2presets/output/");

	~collectedpatches = ~collectedpatches.add(File.readAllString(prepath));

	(4..7).do({ // banks 4,5,6,7
		|bank|
		(0..127).do({ // programs 1..128
			| patch |
			var b = ~banks[bank];
			var p = "P"++(patch+1);
			("Processing patch "++b++p).postln;
			~synth.get_patch_from_synth(bank, patch, {
				~synth.get_global_parameters_from_synth({
					~expl = TemplateFiller.new(~synth.rev2);
					~collectedpatches = ~collectedpatches.add(~expl.generate_string(b, p));
				});
			});
			"Waiting 1 seconds to get the next patch.".postln;
			1.wait;
		});
	});
	~collectedpatches = ~collectedpatches.add(File.readAllString(postpath));

	"Finished.".postln;

	File.use(outputpath +/+ "specsheets.tex", "w", { |f|
		~collectedpatches.do({
			|el|
			f.write(el);
		});
	});

	File.copy(pngpath, outputpath +/+ "rev2.png");
};
)
